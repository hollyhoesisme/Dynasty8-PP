{"version":3,"sources":["components/create-todo.component.js","components/edit-todo.component.js","components/todos-list.component.js","components/property-listings.js","components/create-listing.component.js","images/logo/Logo-Combined-Transparent.png","components/transfer-title.component.js","components/edit-listing.component.js","App.js","reportWebVitals.js","index.js"],"names":["houseInteriorOptions","value","label","propertyOwners","CreateTodo","props","onChangePropertyOwner","property_owner","setState","onSelectChangeHouseInterior","property_house_interior","getDateSubmitted","bind","onChangePropertyAddress","onChangePropertyPrice","onChangeHouseId","onChangePropertyRealtor","onChangePropertyNotes","onSubmit","today","coords","getGpsCoordinates","console","log","state","date_submitted","property_address","location","address","property_price","price","property_house_id","property_realtor","property_notes","property_gps_coordinates","property_description","description","showSubmissible","isSubmissible","e","preventDefault","Date","submissibleCheck","key","this","Boolean","trim","length","push","includes","newProperty","axios","post","then","res","data","toString","Math","random","parseInt","target","className","style","marginTop","noValidate","type","readOnly","onChange","required","options","Component","propertyOwnersOptions","EditTodo","setLastModified","setNewGpsCoordinates","onCancel","get","match","params","id","response","initial_owner","initialPropertyOwner","find","o","initial_interior","initialPropertyHouseInterior","i","catch","error","date","toLocaleDateString","lastModified","obj","last_modified","history","class","getFormattedDateSubmitted","onClick","TodosList","deleteProperty","todos","propertyId","currentProperties","filter","p","_id","delete","todo","map","currentSold","to","Button","variant","filterSearch","getSoldListings","PropertyListings","listings","mirror_park","vinewood_hills","south_side","is_viewable","separateByCity","allCities","mirrorPark","listing","property_area","vinewoodHills","southside","toLocaleString","substring","searchString","city","c","getTableColumns","getPropertyListings","currentListing","pathname","is_sold","getEditTitleButton","old_property_owner","getTransferButton","getEditListingButton","getFormattedPrice","getFormattedDescription","getTable","CreateListing","setDateSubmitted","onChangePropertyDescription","onChangePropertyArea","getNewGpsCoordinates","placeholder","TransferTitle","onChangeOldPropertyOwner","onChangeNewPropertyOwner","new_property_owner","onChangePropertyResalePrice","property_title","property_resale_price","transferredTitle","updatedTitle","EditListing","updatedListing","App","src","logo","path","exact","component","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f066adb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport '../App.css';\r\n\r\nconst houseInteriorOptions = [\r\n    { value: '1-southside', label: '1. Southside' },\r\n    { value: '2-middleclass', label: '2. Middle Class' },\r\n    { value: '3-mansion', label: '3. Mansion' },\r\n    { value: '10-business', label: '10. Business' },\r\n];\r\n\r\n// Temporary Property Owners. Should be populated from your Users Database.\r\nconst propertyOwners = [\r\n    { value: 'Wayne Givens', label: 'Wayne Givens' },\r\n    { value: 'Joe Nilly', label: 'Joe Nilly' },\r\n    { value: 'RJ Stevens', label: 'RJ Stevens' },\r\n    { value: 'Gene Galarin', label: 'Gene Galarin' },\r\n];\r\n\r\n// Address\r\n// Date - DATE (auto-filled)\r\n// Price - Integer (open text)\r\n// Realtor - String (open text)\r\n// Property owner - String (dropdown)\r\n// House ID - Integer (open text, or autofilled)\r\n// GPS Coordinates - string (autofilled)\r\n// Notes - string - open text\r\n\r\n// Transfers\r\n// Address\r\n// Date\r\n// Realtor\r\n// Old Property Owner\r\n// New Property Owner\r\n// Old House ID\r\n// New House ID\r\n// Notes\r\n\r\nexport default class CreateTodo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getDateSubmitted = this.getDateSubmitted.bind(this);\r\n        this.onChangePropertyAddress = this.onChangePropertyAddress.bind(this);\r\n        this.onChangePropertyPrice = this.onChangePropertyPrice.bind(this);\r\n        this.onChangePropertyOwner = this.onChangePropertyOwner.bind(this);\r\n        this.onChangeHouseId = this.onChangeHouseId.bind(this);\r\n        this.onChangePropertyRealtor = this.onChangePropertyRealtor.bind(this);\r\n        this.onChangePropertyNotes = this.onChangePropertyNotes.bind(this);\r\n        this.onSelectChangeHouseInterior = this.onSelectChangeHouseInterior.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        const today = this.getDateSubmitted();\r\n        const coords = this.getGpsCoordinates();\r\n        console.log(props);\r\n        this.state = {\r\n            date_submitted: today,\r\n            property_address: props.location.address,\r\n            property_price: props.location.price,\r\n            property_owner: '',\r\n            property_house_id: null,\r\n            property_realtor: '',\r\n            property_house_interior: null,\r\n            property_notes: '',\r\n            property_gps_coordinates: coords,\r\n            property_description: props.location.description,\r\n            showSubmissible: false,\r\n            isSubmissible: false,\r\n        };\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const today = new Date();\r\n        let submissibleCheck = [];\r\n        for (var key in this.state) {\r\n            //Not null, boolean, or empty\r\n            if (!this.state[key] && typeof (this.state[key]) !== Boolean && this.state[key] === \"\") {\r\n                if (key === \"property_owner\" || key === \"property_house_interior\") {\r\n                    if (!this.state[key] || this.state[key].value.trim().length <= 0) {\r\n                        submissibleCheck.push(false);\r\n                    }\r\n                } else if (this.state[key].trim().length <= 0) {\r\n                    submissibleCheck.push(false);\r\n                }\r\n            }\r\n        }\r\n\r\n        let isSubmissible = false;\r\n        if (!submissibleCheck.includes(false)) {\r\n            isSubmissible = true;\r\n        }\r\n\r\n        if (isSubmissible === true) {\r\n            console.log(`Form submitted:`);\r\n\r\n            const newProperty = {\r\n                date_submitted: today,\r\n                property_address: this.state.property_address,\r\n                property_price: this.state.property_price,\r\n                property_owner: this.state.property_owner.value,\r\n                property_house_id: this.state.property_house_id,\r\n                property_realtor: this.state.property_realtor,\r\n                property_house_interior: this.state.property_house_interior.value,\r\n                property_notes: this.state.property_notes,\r\n                property_gps_coordinates: this.state.property_gps_coordinates,\r\n            };\r\n\r\n            axios.post('http://localhost:4000/todos/inserttitle', newProperty)\r\n                .then(res => console.log(res.data));\r\n\r\n            this.setState({\r\n                date_submitted: null,\r\n                property_address: '',\r\n                property_price: null,\r\n                property_owner: '',\r\n                property_house_id: null,\r\n                property_realtor: '',\r\n                property_gps_coordinates: '',\r\n                property_notes: '',\r\n                property_house_interior: null\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showSubmissible: true\r\n            })\r\n        }\r\n    }\r\n\r\n    // This works, but I'd replace this with w/e function you're currently use\r\n    // to get the current date/time in the city. Ensures consistency for your database.\r\n    getDateSubmitted() {\r\n        const today = new Date();\r\n        return today.toString();\r\n    }\r\n\r\n    // For testing purposes, just generates an arbitratry coordinate\r\n    // Replace this with your existing function that gets current coordinates\r\n    getGpsCoordinates() {\r\n        const num1 = Math.random() * (500000 - 100000) + 100000;\r\n        const num2 = Math.random() * (500000 - 100000) + 100000;\r\n        const coords = \"<\" + num1 + \", \" + num2 + \">\"\r\n        return coords;\r\n    }\r\n\r\n    onChangePropertyOwner = property_owner => {\r\n        this.setState(\r\n            { property_owner }\r\n        );\r\n    }\r\n\r\n    onChangePropertyPrice(e) {\r\n        this.setState({\r\n            property_price: parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    onChangeHouseId(e) {\r\n        this.setState({\r\n            property_house_id: parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    onChangePropertyRealtor(e) {\r\n        this.setState({\r\n            property_realtor: e.target.value\r\n        })\r\n    }\r\n\r\n    onSelectChangeHouseInterior = property_house_interior => {\r\n        this.setState(\r\n            { property_house_interior }\r\n        );\r\n    };\r\n\r\n    onChangePropertyAddress(e) {\r\n        this.setState({\r\n            property_address: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangePropertyNotes(e) {\r\n        this.setState({\r\n            property_notes: e.target.value\r\n        });\r\n    }\r\n\r\n    filterSearch() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style={{ marginTop: 10 }}>\r\n                <div>\r\n                    <h3>Add New Title:\r\n                        <h3 className=\"green-header\">\r\n                            {this.state.property_address}\r\n                        </h3>\r\n                    </h3>\r\n                </div>\r\n                <form onSubmit={this.onSubmit}\r\n                    noValidate>\r\n                    <div className=\"form-group\">\r\n                        <label>Date: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.date_submitted}\r\n                            readOnly\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Address: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_address}\r\n                            onChange={this.onChangePropertyAddress}\r\n                            required\r\n                            readOnly\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Property Owner:</label>\r\n                        <Select\r\n                            value={this.state.property_owner}\r\n                            onChange={this.onChangePropertyOwner}\r\n                            options={propertyOwners}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Property ID: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_house_id}\r\n                            onChange={this.onChangeHouseId}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Price: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_price}\r\n                            onChange={this.onChangePropertyPrice}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Property Interior:</label>\r\n                        <Select\r\n                            value={this.state.property_house_interior}\r\n                            onChange={this.onSelectChangeHouseInterior}\r\n                            options={houseInteriorOptions}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Realtor: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_realtor}\r\n                            onChange={this.onChangePropertyRealtor}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Description: </label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_description}\r\n                            readOnly\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Notes: </label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_notes}\r\n                            onChange={this.onChangePropertyNotes}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>GPS Coordinates: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_gps_coordinates}\r\n                            readOnly\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Add Title\" className=\"btn btn-primary\" />\r\n                        {\r\n                            this.state.showSubmissible\r\n                                ? <p className=\"dumbass\"> Fill out the form properly dumbass!</p>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\n\r\nconst houseInteriorOptions = [\r\n    { value: '1-southside', label: '1. Southside' },\r\n    { value: '2-middleclass', label: '2. Middle Class' },\r\n    { value: '3-mansion', label: '3. Mansion' },\r\n    { value: '10-business', label: '10. Business' },\r\n];\r\n\r\n// Temporary Property Owners. Should be populated from your Users Database.\r\nconst propertyOwnersOptions = [\r\n    { value: 'Wayne Givens', label: 'Wayne Givens' },\r\n    { value: 'Joe Nilly', label: 'Joe Nilly' },\r\n    { value: 'RJ Stevens', label: 'RJ Stevens' },\r\n    { value: 'Gene Galarin', label: 'Gene Galarin' },\r\n];\r\n\r\nexport default class EditTodo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.setLastModified = this.setLastModified.bind(this);\r\n        this.setNewGpsCoordinates = this.setNewGpsCoordinates.bind(this);\r\n        this.onChangePropertyAddress = this.onChangePropertyAddress.bind(this);\r\n        this.onChangePropertyPrice = this.onChangePropertyPrice.bind(this);\r\n        this.onChangePropertyOwner = this.onChangePropertyOwner.bind(this);\r\n        this.onChangeHouseId = this.onChangeHouseId.bind(this);\r\n        this.onChangePropertyRealtor = this.onChangePropertyRealtor.bind(this);\r\n        this.onChangePropertyNotes = this.onChangePropertyNotes.bind(this);\r\n        this.onSelectChangeHouseInterior = this.onSelectChangeHouseInterior.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onCancel = this.onCancel.bind(this);\r\n\r\n        this.state = {\r\n            date_submitted: null,\r\n            property_address: '',\r\n            property_price: null,\r\n            property_owner: '',\r\n            property_house_id: null,\r\n            property_realtor: '',\r\n            property_gps_coordinates: '',\r\n            property_notes: '',\r\n            property_house_interior: null,\r\n            showSubmissible: false,\r\n            isSubmissible: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props);\r\n        axios.get('http://localhost:4000/todos/' + this.props.match.params.id)\r\n            .then(response => {\r\n                const initial_owner = response.data.property_owner;\r\n                const initialPropertyOwner = propertyOwnersOptions.find(o => o.value === initial_owner);\r\n\r\n                const initial_interior = response.data.property_house_interior;\r\n                const initialPropertyHouseInterior = houseInteriorOptions.find(i => i.value === initial_interior);\r\n\r\n                this.setState({\r\n                    date_submitted: response.data.date_submitted,\r\n                    property_address: response.data.property_address,\r\n                    property_price: response.data.property_price,\r\n                    property_owner: initialPropertyOwner,\r\n                    property_house_id: response.data.property_house_id,\r\n                    property_realtor: response.data.property_realtor,\r\n                    property_house_interior: initialPropertyHouseInterior,\r\n                    property_notes: response.data.property_notes,\r\n                    property_gps_coordinates: response.data.property_gps_coordinates,\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n\r\n    getFormattedDateSubmitted(date) {\r\n        date = new Date(date);\r\n        return date.toLocaleDateString();\r\n    }\r\n\r\n    // This works, but I'd replace this with w/e function you're currently use\r\n    // to get the current date/time in the city. Ensures consistency for your database.\r\n    // This function should be called in onSubmit()\r\n    setLastModified() {\r\n        const today = new Date();\r\n        return today.toString();\r\n    }\r\n\r\n    // For testing purposes, just generates an arbitratry coordinate\r\n    // Replace this with your existing function that gets current coordinates\r\n    setNewGpsCoordinates() {\r\n        console.log('coords');\r\n        const num1 = Math.random() * (500000 - 100000) + 100000;\r\n        const num2 = Math.random() * (500000 - 100000) + 100000;\r\n        const coords = \"<\" + num1 + \", \" + num2 + \">\"\r\n        this.setState({\r\n            property_gps_coordinates: coords\r\n        });\r\n    }\r\n\r\n    onChangePropertyOwner = property_owner => {\r\n        const p = property_owner.value;\r\n        this.setState(\r\n            { property_owner }\r\n        );\r\n    }\r\n\r\n    onChangePropertyPrice(e) {\r\n        this.setState({\r\n            property_price: parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    onChangeHouseId(e) {\r\n        this.setState({\r\n            property_house_id: parseInt(e.target.value)\r\n        })\r\n    }\r\n\r\n    onChangePropertyRealtor(e) {\r\n        this.setState({\r\n            property_realtor: e.target.value\r\n        })\r\n    }\r\n\r\n    onSelectChangeHouseInterior = property_house_interior => {\r\n        this.setState(\r\n            { property_house_interior }\r\n        );\r\n    };\r\n\r\n    onChangePropertyAddress(e) {\r\n        this.setState({\r\n            property_address: e.target.value\r\n        })\r\n    }\r\n\r\n    onChangePropertyNotes(e) {\r\n        this.setState({\r\n            property_notes: e.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const isSubmissible = this.isSubmissible();\r\n\r\n        if (isSubmissible === true) {\r\n            const lastModified = this.setLastModified();\r\n            const obj = {\r\n                date_submitted: this.state.date_submitted,\r\n                last_modified: lastModified,\r\n                property_address: this.state.property_address,\r\n                property_price: this.state.property_price,\r\n                property_owner: this.state.property_owner.value,\r\n                property_house_id: this.state.property_house_id,\r\n                property_realtor: this.state.property_realtor,\r\n                property_house_interior: this.state.property_house_interior.value,\r\n                property_notes: this.state.property_notes,\r\n                property_gps_coordinates: this.state.property_gps_coordinates,\r\n            };\r\n            console.log(obj);\r\n            console.log(this.props.match.params.id);\r\n            axios.post('http://localhost:4000/todos/update/' + this.props.match.params.id, obj)\r\n                .then(res => console.log(res.data));\r\n\r\n            this.props.history.push('/');\r\n        } else {\r\n            this.setState({\r\n                showSubmissible: true\r\n            })\r\n        }\r\n    }\r\n\r\n    isSubmissible() {\r\n        let submissibleCheck = [];\r\n        for (var key in this.state) {\r\n            console.log(key + \": \" + this.state[key]);\r\n            //Not null, boolean, or empty\r\n            if (typeof (this.state[key]) !== \"boolean\") {\r\n                if (typeof (this.state[key]) === \"string\") {\r\n                    if (this.state[key] === \"\" || this.state[key].trim().length <= 0) {\r\n                        submissibleCheck.push(false);\r\n                        console.log('false: ' + key + \" \" + this.state[key]);\r\n                    }\r\n                } else if (!this.state[key]) {\r\n                    submissibleCheck.push(false);\r\n                    console.log('false: ' + key + \" \" + this.state[key]);\r\n                }\r\n            }\r\n        }\r\n        console.log(submissibleCheck);\r\n        let isSubmissible = false;\r\n        if (!submissibleCheck.includes(false)) {\r\n            isSubmissible = true;\r\n        }\r\n\r\n        return isSubmissible;\r\n    }\r\n\r\n    onCancel() {\r\n        console.log('cancel');\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style={{ marginTop: 10 }}>\r\n                <h3>Editing Property Title:\r\n                    <h3 className=\"green-header\">\r\n                        {this.state.property_address}\r\n                    </h3>\r\n                </h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div class=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group\">\r\n                        <label>Date: </label>\r\n                        <input readOnly\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.getFormattedDateSubmitted(this.state.date_submitted)}\r\n\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Address: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_address}\r\n                            onChange={this.onChangePropertyAddress}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Property Owner:</label>\r\n                        <Select\r\n                            value={this.state.property_owner}\r\n                            onChange={this.onChangePropertyOwner}\r\n                            options={propertyOwnersOptions}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Property ID: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_house_id}\r\n                            onChange={this.onChangeHouseId}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Price: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_price}\r\n                            onChange={this.onChangePropertyPrice}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Property Interior:</label>\r\n                        <Select\r\n                            value={this.state.property_house_interior}\r\n                            onChange={this.onSelectChangeHouseInterior}\r\n                            options={houseInteriorOptions}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Realtor: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_realtor}\r\n                            onChange={this.onChangePropertyRealtor}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Notes: </label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_notes}\r\n                            onChange={this.onChangePropertyNotes}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>GPS Coordinates: </label>\r\n                        <input readOnly\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_gps_coordinates}\r\n                        />\r\n                        <input onClick={() => { this.setNewGpsCoordinates() }} value=\"Update Location\" className=\"btn btn-warning\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Update Property\" className=\"btn btn-primary\" />\r\n                        {\r\n                            this.state.showSubmissible\r\n                                ? <p className=\"dumbass\"> Fill out the form properly dumbass!</p>\r\n                                : null\r\n                        }\r\n                        &nbsp;&nbsp;\r\n                        <input onClick={() => { this.onCancel() }} value=\"Cancel\" className=\"btn btn-danger\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\n\r\nexport default class TodosList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.deleteProperty = this.deleteProperty.bind(this);\r\n\r\n        this.state = { todos: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:4000/todos/getsold')\r\n            .then(response => {\r\n                this.setState({ todos: response.data });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    deleteProperty(propertyId) {\r\n        // This \"refreshes\" the table upon delete. \r\n        // Without this, you have to refresh the web page to reflect the delete\r\n        const currentProperties = this.state.todos;\r\n        this.setState({\r\n            todos: currentProperties.filter(p => p._id != propertyId)\r\n        });\r\n\r\n        axios.delete('http://localhost:4000/todos/delete/' + propertyId)\r\n            .then((res) => {\r\n                console.log(this.props.todo.property_address + ' has been deleted')\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    filterSearch() {\r\n\r\n    }\r\n\r\n\r\n    getSoldListings() {\r\n        let todoList = this.state.todos.map((currentSold, i) => {\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        <Link to={\"/edittitle/\" + currentSold._id}>\r\n                            <Button className=\"grid-button\" variant=\"secondary\">Edit Title</Button>\r\n                        </Link>\r\n                    </td>\r\n                    <td>{currentSold.property_address}</td>\r\n                    <td>{currentSold.property_owner}</td>\r\n                    <td>{currentSold.property_house_id}</td>\r\n                    <td>{currentSold.property_realtor}</td>\r\n                    <td>{currentSold.date_submitted}</td>\r\n                    <td>\r\n                        <Button className=\"grid-button delete\"\r\n                            variant=\"danger\"\r\n                            onClick={() => { this.deleteProperty(currentSold._id) }}>\r\n                            Delete\r\n                                </Button>\r\n                    </td>\r\n                </tr >\r\n            );\r\n        });\r\n\r\n        return todoList;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"title\">\r\n                    <h3>Sold Properties</h3>\r\n                    <div className=\"search-div\">\r\n                        <input type=\"text\"\r\n                            className=\"search-filter form-control\"\r\n                            onChange={this.filterSearch()}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <table className=\"custom-table table table-striped\" style={{ marginTop: 20 }} >\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Edit</th>\r\n                            <th>Address</th>\r\n                            <th>Property Owner</th>\r\n                            <th>House ID</th>\r\n                            <th>Realtor</th>\r\n                            <th>Date Submitted</th>\r\n                            <th>Delete</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.getSoldListings()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Button from 'react-bootstrap/Button';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\n\r\nexport default class PropertyListings extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            listings: [],\r\n            mirror_park: [],\r\n            vinewood_hills: [],\r\n            south_side: [],\r\n            is_viewable: {\r\n                mirror_park: true,\r\n                vinewood_hills: true,\r\n                south_side: true\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:4000/todos/getlistingsmerged')\r\n            .then(response => {\r\n                this.setState({ listings: response.data });\r\n                console.log(this.state.listings);\r\n                this.separateByCity();\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    separateByCity() {\r\n        let allCities = this.state.listings;\r\n        let mirrorPark = allCities.filter(listing => listing.property_area === \"Mirror Park\");\r\n        let vinewoodHills = allCities.filter(listing => listing.property_area === \"Vinewood\");\r\n        let southside = allCities.filter(listing => listing.property_area === \"Southside\");\r\n\r\n        this.setState({\r\n            mirror_park: mirrorPark,\r\n            vinewood_hills: vinewoodHills,\r\n            south_side: southside\r\n        })\r\n    }\r\n\r\n    deleteProperty(propertyId) {\r\n        // This \"refreshes\" the table upon delete. \r\n        // Without this, you have to refresh the web page to reflect the delete\r\n        const currentProperties = this.state.listings;\r\n        this.setState({\r\n            listings: currentProperties.filter(p => p._id != propertyId)\r\n        });\r\n\r\n        axios.delete('http://localhost:4000/todos/deletelisting/' + propertyId)\r\n            .then((res) => {\r\n                console.log(this.props.todo.property_address + ' has been deleted')\r\n            }).catch((error) => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    getFormattedDateSubmitted(date) {\r\n        date = new Date(date);\r\n        return date.toLocaleDateString();\r\n    }\r\n\r\n    getFormattedPrice(price) {\r\n        if (typeof (price) === \"number\") {\r\n            return \"$\" + price.toLocaleString();\r\n        } else {\r\n            return price;\r\n        }\r\n    }\r\n\r\n    getFormattedDescription(description) {\r\n        var maxLength = 80;\r\n        if (description.length > maxLength) {\r\n            description = description.substring(0, maxLength) + \"...\";\r\n        }\r\n        return description;\r\n    }\r\n\r\n    filterSearch(searchString) {\r\n        let city = this.state.vinewood_hills;\r\n        city = city.filter(c => (\r\n            c.property_address === searchString\r\n        ));\r\n    }\r\n\r\n    getEditTitleButton() {\r\n        return (\r\n            <div>\r\n                <Button className=\"grid-button\" variant=\"secondary\">Edit Title</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getEditListingButton() {\r\n        return (\r\n            <div>\r\n                <Button className=\"grid-button\" variant=\"secondary\">Edit Listing</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getTransferButton() {\r\n        return (\r\n            <div>\r\n                <Button className=\"grid-button\" variant=\"warning\">Transfer Title</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getTable(city) {\r\n        return (\r\n            <table className=\"custom-table table table-bordered\" >\r\n                {this.getTableColumns()}\r\n                <tbody>\r\n                    {this.getPropertyListings(city)}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    getTableColumns() {\r\n        return (\r\n            <thead>\r\n                <tr>\r\n                    <th>---</th>\r\n                    <th>---</th>\r\n                    <th>Address</th>\r\n                    <th>Price</th>\r\n                    <th>Owner</th>\r\n                    <th>Description</th>\r\n                    <th>Area</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n            </thead>\r\n        );\r\n    }\r\n\r\n    getPropertyListings(city) {\r\n        let propertyListings = city.map((currentListing, i) => {\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        <Link to={{\r\n                            pathname: \"/createtitle/\" + currentListing.id,\r\n                            address: currentListing.property_address,\r\n                            price: currentListing.property_price,\r\n                            description: currentListing.property_description\r\n                        }}>\r\n                            {\r\n                                !currentListing.is_sold\r\n                                    ? <Button className=\"grid-button\" variant=\"success\">Add Title</Button>\r\n                                    : null\r\n                            }\r\n                        </Link>\r\n                        <Link to={\"/edittitle/\" + currentListing.id}>\r\n                            {\r\n                                currentListing.is_sold\r\n                                    ? this.getEditTitleButton()\r\n                                    : null\r\n                            }\r\n                        </Link>\r\n                    </td>\r\n                    <td>\r\n                        <Link to={{\r\n                            pathname: \"/transfertitle/\" + currentListing._id,\r\n                            id: currentListing.id,\r\n                            address: currentListing.property_address,\r\n                            old_property_owner: currentListing.property_owner,\r\n                        }}>\r\n                            {\r\n                                currentListing.is_sold\r\n                                    ? this.getTransferButton()\r\n                                    : null\r\n                            }\r\n                        </Link>\r\n                        <Link to={{\r\n                            pathname: \"/editlisting/\" + currentListing._id,\r\n                            id: currentListing._id,\r\n                        }}>\r\n                            {\r\n                                !currentListing.is_sold\r\n                                    ? this.getEditListingButton()\r\n                                    : null\r\n                            }\r\n                        </Link>\r\n                    </td>\r\n                    <td>{currentListing.property_address}</td>\r\n                    <td>{this.getFormattedPrice(currentListing.property_price)}</td>\r\n                    <td>{currentListing.property_owner}</td>\r\n                    <td class=\"cell\">{this.getFormattedDescription(currentListing.property_description)}</td>\r\n                    <td>{currentListing.property_area}</td>\r\n                    <td>\r\n                        <Button className=\"grid-button delete\"\r\n                            variant=\"danger\"\r\n                            onClick={() => { this.deleteProperty(currentListing._id) }}>\r\n                            Delete\r\n                                </Button>\r\n                    </td>\r\n                </tr >\r\n            );\r\n        });\r\n\r\n        return propertyListings;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"title\">\r\n                    <h3>Property Listings</h3>\r\n                    <div className=\"search-div\">\r\n                        <input type=\"text\"\r\n                            className=\"search-filter form-control\"\r\n                            onChange={this.filterSearch()}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <div className=\"title\">\r\n                    <h3 className=\"city title\">Mirror Park</h3>\r\n                    {\r\n                        this.state.is_viewable.mirror_park\r\n                            ? <div> {this.getTable(this.state.mirror_park)}</div>\r\n                            : null\r\n                    }\r\n                </div>\r\n                <br />\r\n                <div className=\"title\">\r\n                    <h3 className=\"city title\">Vinewood Hills</h3>\r\n                    <div>\r\n                        {this.getTable(this.state.vinewood_hills)}\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <div className=\"title\">\r\n                    <h3 className=\"city title\">Southside</h3>\r\n                    <div>\r\n                        {this.getTable(this.state.south_side)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\n\r\nexport default class CreateListing extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.setDateSubmitted = this.setDateSubmitted.bind(this);\r\n        this.onChangePropertyAddress = this.onChangePropertyAddress.bind(this);\r\n        this.onChangePropertyPrice = this.onChangePropertyPrice.bind(this);\r\n        this.onChangePropertyDescription = this.onChangePropertyDescription.bind(this);\r\n        this.onChangePropertyArea = this.onChangePropertyArea.bind(this);\r\n        this.getNewGpsCoordinates = this.getNewGpsCoordinates.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        const today = this.setDateSubmitted();\r\n        const coords = this.getNewGpsCoordinates();\r\n\r\n        this.state = {\r\n            date_submitted: today,\r\n            property_address: '',\r\n            property_price: null,\r\n            property_description: '',\r\n            property_area: '',\r\n            property_gps_coordinates: coords,\r\n            showSubmissible: false,\r\n            isSubmissible: false,\r\n        };\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const today = new Date();\r\n        let submissibleCheck = [];\r\n        for (var key in this.state) {\r\n            //Not null, boolean, or empty\r\n            if (!this.state[key] && typeof (this.state[key]) !== Boolean && this.state[key] === \"\") {\r\n                if (key === \"property_owner\" || key === \"property_house_interior\") {\r\n                    if (!this.state[key] || this.state[key].value.trim().length <= 0) {\r\n                        submissibleCheck.push(false);\r\n                    }\r\n                } else if (this.state[key].trim().length <= 0) {\r\n                    submissibleCheck.push(false);\r\n                }\r\n            }\r\n        }\r\n\r\n        let isSubmissible = false;\r\n        if (!submissibleCheck.includes(false)) {\r\n            isSubmissible = true;\r\n        }\r\n\r\n        if (isSubmissible === true) {\r\n            console.log(`Form submitted:`);\r\n\r\n            const newProperty = {\r\n                date_submitted: today,\r\n                property_address: this.state.property_address,\r\n                property_price: this.state.property_price,\r\n                property_description: this.state.property_description,\r\n                property_area: this.state.property_area,\r\n                property_gps_coordinates: this.state.property_gps_coordinates,\r\n            };\r\n\r\n            axios.post('http://localhost:4000/todos/insertlisting', newProperty)\r\n                .then(res => console.log(res.data));\r\n\r\n            this.setState({\r\n                date_submitted: null,\r\n                property_address: '',\r\n                property_price: null,\r\n                property_description: '',\r\n                property_area: '',\r\n                property_gps_coordinates: '',\r\n                isSubmissible: false,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showSubmissible: true\r\n            })\r\n        }\r\n    }\r\n\r\n    // This works, but I'd replace this with w/e function you're currently use\r\n    // to get the current date/time in the city. Ensures consistency for your database.\r\n    setDateSubmitted() {\r\n        const today = new Date();\r\n        return today.toString();\r\n    }\r\n\r\n    getFormattedDateSubmitted(date) {\r\n        date = new Date(date);\r\n        return date.toLocaleDateString();\r\n    }\r\n\r\n\r\n    // For testing purposes, just generates an arbitratry coordinate\r\n    // Replace this with your existing function that gets current coordinates\r\n    getNewGpsCoordinates() {\r\n        const num1 = Math.random() * (500000 - 100000) + 100000;\r\n        const num2 = Math.random() * (500000 - 100000) + 100000;\r\n        const coords = \"<\" + num1 + \", \" + num2 + \">\"\r\n        this.setState({\r\n            property_gps_coordinates: coords\r\n        });\r\n    }\r\n\r\n    onChangePropertyOwner = property_owner => {\r\n        this.setState(\r\n            { property_owner }\r\n        );\r\n    }\r\n\r\n    onChangePropertyPrice(e) {\r\n        this.setState({\r\n            property_price: parseInt(e.target.value)\r\n        });\r\n    }\r\n\r\n    onChangePropertyAddress(e) {\r\n        this.setState({\r\n            property_address: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangePropertyDescription(e) {\r\n        this.setState({\r\n            property_description: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangePropertyArea(e) {\r\n        this.setState({\r\n            property_area: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style={{ marginTop: 10 }}>\r\n                <div className=\"green-header\">\r\n                    <h3>Create New Listing</h3>\r\n                </div>\r\n                <form onSubmit={this.onSubmit}\r\n                    noValidate>\r\n                    <div className=\"form-group\">\r\n                        <label>Date: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.getFormattedDateSubmitted(this.state.date_submitted)}\r\n                            readOnly\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Address: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_address}\r\n                            onChange={this.onChangePropertyAddress}\r\n                            placeholder=\"Address\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Price: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_price}\r\n                            onChange={this.onChangePropertyPrice}\r\n                            placeholder=\"$$$\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Description: </label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_description}\r\n                            onChange={this.onChangePropertyDescription}\r\n                            placeholder=\"Description\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Property Area: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_area}\r\n                            onChange={this.onChangePropertyArea}\r\n                            placeholder=\"Property Area\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>GPS Coordinates: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_gps_coordinates}\r\n                            placeholder=\"< GPS, Coordinates >\"\r\n                            readOnly\r\n                        />\r\n                        <input onClick={() => { this.getNewGpsCoordinates() }} value=\"Update Location\" className=\"btn btn-warning\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Create Listing\" className=\"btn btn-primary\" />\r\n                        {\r\n                            this.state.showSubmissible\r\n                                ? <p className=\"dumbass\"> Fill out the form properly dumbass!</p>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/Logo-Combined-Transparent.2de58f72.png\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\nimport '../App.css';\r\n\r\n// Temporary Property Owners. Should be populated from a backend query to your Players database.\r\nconst propertyOwnersOptions = [\r\n    { value: 'Wayne Givens', label: 'Wayne Givens' },\r\n    { value: 'Joe Nilly', label: 'Joe Nilly' },\r\n    { value: 'RJ Stevens', label: 'RJ Stevens' },\r\n    { value: 'Gene Galarin', label: 'Gene Galarin' },\r\n];\r\n\r\nexport default class TransferTitle extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getDateSubmitted = this.getDateSubmitted.bind(this);\r\n        this.onChangePropertyAddress = this.onChangePropertyAddress.bind(this);\r\n        this.onChangePropertyResalePrice = this.onChangePropertyResalePrice.bind(this);\r\n        this.onChangeOldPropertyOwner = this.onChangeOldPropertyOwner.bind(this);\r\n        this.onChangeNewPropertyOwner = this.onChangeNewPropertyOwner.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        const today = this.getDateSubmitted();\r\n        console.log(props);\r\n        this.state = {\r\n            date_submitted: today,\r\n            property_title: {},\r\n            property_address: props.location.address,\r\n            property_resale_price: null,\r\n            old_property_owner: props.location.old_property_owner,\r\n            new_property_owner: null,\r\n            showSubmissible: false,\r\n            isSubmissible: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:4000/todos/' + this.props.location.id)\r\n            .then(response => {\r\n                this.setState({ property_title: response.data });\r\n                console.log(this.state.property_title);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const today = new Date();\r\n        let submissibleCheck = [];\r\n        for (var key in this.state) {\r\n            //Not null, boolean, or empty\r\n            if (!this.state[key] && typeof (this.state[key]) !== Boolean && this.state[key] === \"\") {\r\n                if (key === \"property_owner\" || key === \"property_house_interior\") {\r\n                    if (!this.state[key] || this.state[key].value.trim().length <= 0) {\r\n                        submissibleCheck.push(false);\r\n                    }\r\n                } else if (this.state[key].trim().length <= 0) {\r\n                    submissibleCheck.push(false);\r\n                }\r\n            }\r\n        }\r\n\r\n        let isSubmissible = false;\r\n        if (!submissibleCheck.includes(false)) {\r\n            isSubmissible = true;\r\n        }\r\n\r\n        if (isSubmissible === true) {\r\n            console.log(`Form submitted:`);\r\n\r\n            const transferredTitle = {\r\n                date_submitted: today,\r\n                property_address: this.state.property_address,\r\n                property_resale_price: this.state.property_price,\r\n                old_property_owner: this.state.old_property_owner.value,\r\n                new_property_owner: this.state.new_property_owner.value,\r\n            };\r\n\r\n            axios.post('http://localhost:4000/todos/inserttransfer', transferredTitle)\r\n                .then(res => console.log(res.data));\r\n\r\n            this.state.property_title.property_owner = this.state.new_property_owner.value;\r\n            const updatedTitle = this.state.property_title;\r\n\r\n            axios.post('http://localhost:4000/todos/update/' + updatedTitle._id, updatedTitle)\r\n                .then(res => console.log(res.data));\r\n\r\n            this.setState({\r\n                date_submitted: null,\r\n                property_address: '',\r\n                property_resale_price: null,\r\n                old_property_owner: null,\r\n                new_property_owner: null,\r\n                isSubmissible: false,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                showSubmissible: true\r\n            })\r\n        }\r\n    }\r\n\r\n    // This works, but I'd replace this with w/e function you're currently use\r\n    // to get the current date/time in the city. Ensures consistency for your database.\r\n    getDateSubmitted() {\r\n        const today = new Date();\r\n        return today.toString();\r\n    }\r\n\r\n    onChangeOldPropertyOwner = old_property_owner => {\r\n        this.setState(\r\n            { old_property_owner }\r\n        );\r\n    }\r\n\r\n    onChangeNewPropertyOwner = new_property_owner => {\r\n        this.setState(\r\n            { new_property_owner }\r\n        );\r\n    }\r\n\r\n    onChangePropertyResalePrice(e) {\r\n        this.setState({\r\n            property_resale_price: parseInt(e.target.value)\r\n        });\r\n    }\r\n\r\n    onChangePropertyAddress(e) {\r\n        this.setState({\r\n            property_address: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style={{ marginTop: 10 }}>\r\n                <div>\r\n                    <h3>\r\n                        Transfer Title:\r\n                        <h3 className=\"green-header\">\r\n                            {this.state.property_address}\r\n                        </h3>\r\n                    </h3>\r\n\r\n                </div>\r\n                <form onSubmit={this.onSubmit}\r\n                    noValidate>\r\n                    <div className=\"form-group\">\r\n                        <label>Date: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.date_submitted}\r\n                            readOnly\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Address: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_address}\r\n                            onChange={this.onChangePropertyAddress}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Resale Price: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_resale_price}\r\n                            onChange={this.onChangePropertyResalePrice}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Old Property Owner: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.old_property_owner}\r\n                            required\r\n                            readOnly\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>New Property Owner: </label>\r\n                        <Select\r\n                            value={this.state.new_property_owner}\r\n                            onChange={this.onChangeNewPropertyOwner}\r\n                            options={propertyOwnersOptions}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Create Listing\" className=\"btn btn-primary\" />\r\n                        {\r\n                            this.state.showSubmissible\r\n                                ? <p className=\"dumbass\"> Fill out the form properly dumbass!</p>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\n\r\nexport default class EditListing extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.setDateSubmitted = this.setDateSubmitted.bind(this);\r\n        this.onChangePropertyAddress = this.onChangePropertyAddress.bind(this);\r\n        this.onChangePropertyPrice = this.onChangePropertyPrice.bind(this);\r\n        this.onChangePropertyDescription = this.onChangePropertyDescription.bind(this);\r\n        this.onChangePropertyArea = this.onChangePropertyArea.bind(this);\r\n        this.getNewGpsCoordinates = this.getNewGpsCoordinates.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n\r\n        const today = this.setDateSubmitted();\r\n        const coords = this.getNewGpsCoordinates();\r\n\r\n        this.state = {\r\n            date_submitted: today,\r\n            property_address: '',\r\n            property_price: null,\r\n            property_description: '',\r\n            property_area: '',\r\n            property_gps_coordinates: coords,\r\n            showSubmissible: false,\r\n            isSubmissible: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('http://localhost:4000/todos/getlisting/' + this.props.location.id)\r\n            .then(response => {\r\n                this.setState({ property_title: response.data });\r\n                console.log(this.state.property_title);\r\n\r\n                this.setState({\r\n                    date_submitted: response.data.date_submitted,\r\n                    property_address: response.data.property_address,\r\n                    property_price: response.data.property_price,\r\n                    property_description: response.data.property_description,\r\n                    property_area: response.data.property_area,\r\n                    property_description: response.data.property_description,\r\n                    property_gps_coordinates: response.data.property_gps_coordinates,\r\n                });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const today = new Date();\r\n        const isSubmissible = this.isSubmissible();\r\n        console.log(\"is submissible \" + isSubmissible);\r\n\r\n        if (isSubmissible === true) {\r\n            console.log(`Form submitted:`);\r\n\r\n            const updatedListing = {\r\n                property_address: this.state.property_address,\r\n                property_price: this.state.property_price,\r\n                property_description: this.state.property_description,\r\n                property_area: this.state.property_area,\r\n                property_gps_coordinates: this.state.property_gps_coordinates,\r\n            };\r\n\r\n            axios.post('http://localhost:4000/todos/updatelisting/' + this.props.location.id, updatedListing)\r\n                .then(res => console.log(res.data));\r\n\r\n            this.setState({\r\n                date_submitted: null,\r\n                property_address: '',\r\n                property_price: null,\r\n                property_description: '',\r\n                property_area: '',\r\n                property_gps_coordinates: '',\r\n                isSubmissible: false,\r\n            });\r\n            this.props.history.push('/');\r\n        } else {\r\n            this.setState({\r\n                showSubmissible: true\r\n            })\r\n        }\r\n    }\r\n\r\n    onCancel() {\r\n        console.log('cancel');\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    isSubmissible() {\r\n        let submissibleCheck = [];\r\n        for (var key in this.state) {\r\n            console.log(key + \": \" + this.state[key]);\r\n            //Not null, boolean, or empty\r\n            if (typeof (this.state[key]) !== \"boolean\") {\r\n                if (typeof (this.state[key]) === \"string\") {\r\n                    if (this.state[key] === \"\" || this.state[key].trim().length <= 0) {\r\n                        submissibleCheck.push(false);\r\n                        console.log('false: ' + key + \" \" + this.state[key]);\r\n                    }\r\n                } else if (!this.state[key]) {\r\n                    submissibleCheck.push(false);\r\n                    console.log('false: ' + key + \" \" + this.state[key]);\r\n                }\r\n            }\r\n        }\r\n        console.log(submissibleCheck);\r\n        let isSubmissible = false;\r\n        if (!submissibleCheck.includes(false)) {\r\n            isSubmissible = true;\r\n        }\r\n\r\n        return isSubmissible;\r\n    }\r\n\r\n    // This works, but I'd replace this with w/e function you're currently use\r\n    // to get the current date/time in the city. Ensures consistency for your database.\r\n    setDateSubmitted() {\r\n        const today = new Date();\r\n        return today.toString();\r\n    }\r\n\r\n    getFormattedDateSubmitted(date) {\r\n        date = new Date(date);\r\n        return date.toLocaleDateString();\r\n    }\r\n\r\n\r\n    // For testing purposes, just generates an arbitratry coordinate\r\n    // Replace this with your existing function that gets current coordinates\r\n    getNewGpsCoordinates() {\r\n        const num1 = Math.random() * (500000 - 100000) + 100000;\r\n        const num2 = Math.random() * (500000 - 100000) + 100000;\r\n        const coords = \"<\" + num1 + \", \" + num2 + \">\"\r\n        this.setState({\r\n            property_gps_coordinates: coords\r\n        });\r\n    }\r\n\r\n    onChangePropertyOwner = property_owner => {\r\n        this.setState(\r\n            { property_owner }\r\n        );\r\n    }\r\n\r\n    onChangePropertyPrice(e) {\r\n        this.setState({\r\n            property_price: parseInt(e.target.value)\r\n        });\r\n    }\r\n\r\n    onChangePropertyAddress(e) {\r\n        this.setState({\r\n            property_address: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangePropertyDescription(e) {\r\n        this.setState({\r\n            property_description: e.target.value\r\n        });\r\n    }\r\n\r\n    onChangePropertyArea(e) {\r\n        this.setState({\r\n            property_area: e.target.value\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style={{ marginTop: 10 }}>\r\n                <div className=\"green-header\">\r\n                    <h3>Edit Listing</h3>\r\n                </div>\r\n                <form onSubmit={this.onSubmit}\r\n                    noValidate>\r\n                    <div className=\"form-group\">\r\n                        <label>Date: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.getFormattedDateSubmitted(this.state.date_submitted)}\r\n                            readOnly\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Address: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_address}\r\n                            onChange={this.onChangePropertyAddress}\r\n                            placeholder=\"Address\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Price: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_price}\r\n                            onChange={this.onChangePropertyPrice}\r\n                            placeholder=\"$$$\"\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Description: </label>\r\n                        <textarea\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_description}\r\n                            onChange={this.onChangePropertyDescription}\r\n                            placeholder=\"Description\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Property Area: </label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_area}\r\n                            onChange={this.onChangePropertyArea}\r\n                            placeholder=\"Property Area\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>GPS Coordinates: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            value={this.state.property_gps_coordinates}\r\n                            placeholder=\"< GPS, Coordinates >\"\r\n                            readOnly\r\n                        />\r\n                        <input onClick={() => { this.getNewGpsCoordinates() }} value=\"Update Location\" className=\"btn btn-warning\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <input type=\"submit\" value=\"Update Listing\" className=\"btn btn-primary\" />\r\n                        {\r\n                            this.state.showSubmissible\r\n                                ? <p className=\"dumbass\"> Fill out the form properly dumbass!</p>\r\n                                : null\r\n                        }\r\n                        &nbsp;&nbsp;\r\n                        <input onClick={() => { this.onCancel() }} value=\"Cancel\" className=\"btn btn-danger\" />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n//https://stackoverflow.com/questions/61305436/bootstrap-dropdown-is-not-working-in-react\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery/dist/jquery.min.js';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport CreateTodo from \"./components/create-todo.component\";\nimport EditTodo from \"./components/edit-todo.component\";\nimport TodosList from \"./components/todos-list.component\";\nimport PropertyListings from \"./components/property-listings\";\nimport CreateListing from \"./components/create-listing.component\";\n\nimport logo from \"./images/logo/Logo-Combined-Transparent.png\"\nimport TransferTitle from \"./components/transfer-title.component\";\nimport EditListing from \"./components/edit-listing.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container-custom\">\n          <nav className=\"navbar-custom navbar navbar-expand-lg navbar-light\">\n            <div>\n              <Link to=\"/\">\n                <img className=\"logo\" src={logo} />\n              </Link>\n            </div>\n            <div className=\"collapse navbar-collapse\">\n              <ul className=\"navbar-nav mr-auto\">\n                <li className=\"navbar-item\">\n                  <Link to=\"/\" className=\"nav-link\">Property Listings</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/sold\" className=\"nav-link\">Sold Properties</Link>\n                </li>\n                <li className=\"navbar-item\">\n                  <Link to=\"/createlisting\" className=\"nav-link\">Create New Listing</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <br />\n          <Route path=\"/\" exact component={PropertyListings} />\n          <Route path=\"/sold\" exact component={TodosList} />\n          <Route path=\"/edittitle/:id\" component={EditTodo} />\n          <Route path=\"/createtitle\" component={CreateTodo} render={(props) => <CreateTodo {...props} />} />\n          <Route path=\"/transfertitle\" component={TransferTitle} render={(props) => <TransferTitle {...props} />} />\n          <Route path=\"/createlisting\" component={CreateListing} />\n          <Route path=\"/editlisting\" component={EditListing} render={(props) => <EditListing {...props} />} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}